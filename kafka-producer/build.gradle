import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.apache.avro.compiler.idl.Idl
import org.apache.avro.compiler.specific.SpecificCompiler

import java.nio.file.Files

buildscript {
	repositories {
		gradlePluginPortal()
		mavenCentral()
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.1'
//		classpath 'org.apache.avro:avro-compiler:1.11.1'
		classpath 'org.apache.avro:avro-tools:1.11.1'
	}
}

plugins {
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.jetbrains.kotlin.jvm' version '1.7.21'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.7.21'
	id 'com.google.protobuf' version '0.9.1'
}

group = 'net.pryszawa.kafkalab'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot:
	implementation('org.springframework.boot:spring-boot-starter') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Kotlin:
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

	// Kafka:
//	implementation 'org.apache.kafka:kafka-clients:3.3.1'
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation 'org.springframework.kafka:spring-kafka-test'

	// protocol buffers:
//	implementation 'com.google.protobuf:protobuf-java:3.21.12'
	implementation 'com.google.protobuf:protobuf-kotlin:3.21.12'

	// AVRO:
	implementation 'org.apache.avro:avro:1.11.1'
}

sourceSets {
	main {
		proto {
//			srcDir 'src/main/proto'
		}
	}
}

clean {
	delete protobuf.generatedFilesBaseDir
}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '17'
	}
}

tasks.named('test') {
//	useJUnitPlatform()
}

bootRun {
	args = ["--spring.profiles.active=local"]
	systemProperty 'cert.dir', "${projectDir.toPath().toAbsolutePath().parent}/certificates"
}

protobuf {
	protoc {
		artifact = 'com.google.protobuf:protoc:3.21.12'
	}
}

// AVRO:
def avroSrcFiles = fileTree('src/main/avro').include('**/*.avdl')
def avroGenDir = buildDir.toPath().resolve("generated/source/avro/main/java")
def avroNamespace = "net.pryszawa.kafkalab.avro"
sourceSets.main.java.srcDir avroGenDir
task avroBuild() {
	group = "build"
	inputs.files avroSrcFiles
	outputs.dir avroGenDir
	doLast {
		def destDir = avroGenDir.toFile()
		def namespaceDestDir = avroGenDir.resolve(avroNamespace.replace('.', '/'))
		Files.createDirectories(namespaceDestDir)
		avroSrcFiles.each { avroSrcFile ->
			def parser = new Idl(avroSrcFile)
			def protocol = parser.CompilationUnit()
			def schemas = protocol.types
			schemas.each {schema ->
				def compiler = new SpecificCompiler(schema)
				compiler.compileToDestination(avroSrcFile, destDir)
			}
		}
	}
}
compileKotlin.dependsOn avroBuild
clean {
	delete avroGenDir
}
